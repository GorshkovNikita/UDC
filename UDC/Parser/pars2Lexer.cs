//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 pars2__.g 2015-04-26 15:13:00

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class pars2Lexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__4=4;
	public const int T__5=5;
	public const int T__6=6;
	public const int T__7=7;
	public const int T__8=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;



	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow) 
	{ 
	        throw new MismatchedTokenException(ttype, input); 
	} 
	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow) 
	{ 
	        throw e; 
	} 

	public override void ReportError(RecognitionException e) {
	        throw e;
	}



	// delegates
	// delegators

	public pars2Lexer()
	{
		OnCreated();
	}

	public pars2Lexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public pars2Lexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "pars2__.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__4();
	partial void LeaveRule_T__4();

	// $ANTLR start "T__4"
	[GrammarRule("T__4")]
	private void mT__4()
	{
		EnterRule_T__4();
		EnterRule("T__4", 1);
		TraceIn("T__4", 1);
		try
		{
			int _type = T__4;
			int _channel = DefaultTokenChannel;
			// pars2__.g:26:6: ( '\"' )
			DebugEnterAlt(1);
			// pars2__.g:26:8: '\"'
			{
			DebugLocation(26, 8);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__4", 1);
			LeaveRule("T__4", 1);
			LeaveRule_T__4();
		}
	}
	// $ANTLR end "T__4"

	partial void EnterRule_T__5();
	partial void LeaveRule_T__5();

	// $ANTLR start "T__5"
	[GrammarRule("T__5")]
	private void mT__5()
	{
		EnterRule_T__5();
		EnterRule("T__5", 2);
		TraceIn("T__5", 2);
		try
		{
			int _type = T__5;
			int _channel = DefaultTokenChannel;
			// pars2__.g:27:6: ( '(' )
			DebugEnterAlt(1);
			// pars2__.g:27:8: '('
			{
			DebugLocation(27, 8);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__5", 2);
			LeaveRule("T__5", 2);
			LeaveRule_T__5();
		}
	}
	// $ANTLR end "T__5"

	partial void EnterRule_T__6();
	partial void LeaveRule_T__6();

	// $ANTLR start "T__6"
	[GrammarRule("T__6")]
	private void mT__6()
	{
		EnterRule_T__6();
		EnterRule("T__6", 3);
		TraceIn("T__6", 3);
		try
		{
			int _type = T__6;
			int _channel = DefaultTokenChannel;
			// pars2__.g:28:6: ( ')' )
			DebugEnterAlt(1);
			// pars2__.g:28:8: ')'
			{
			DebugLocation(28, 8);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__6", 3);
			LeaveRule("T__6", 3);
			LeaveRule_T__6();
		}
	}
	// $ANTLR end "T__6"

	partial void EnterRule_T__7();
	partial void LeaveRule_T__7();

	// $ANTLR start "T__7"
	[GrammarRule("T__7")]
	private void mT__7()
	{
		EnterRule_T__7();
		EnterRule("T__7", 4);
		TraceIn("T__7", 4);
		try
		{
			int _type = T__7;
			int _channel = DefaultTokenChannel;
			// pars2__.g:29:6: ( '+' )
			DebugEnterAlt(1);
			// pars2__.g:29:8: '+'
			{
			DebugLocation(29, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__7", 4);
			LeaveRule("T__7", 4);
			LeaveRule_T__7();
		}
	}
	// $ANTLR end "T__7"

	partial void EnterRule_T__8();
	partial void LeaveRule_T__8();

	// $ANTLR start "T__8"
	[GrammarRule("T__8")]
	private void mT__8()
	{
		EnterRule_T__8();
		EnterRule("T__8", 5);
		TraceIn("T__8", 5);
		try
		{
			int _type = T__8;
			int _channel = DefaultTokenChannel;
			// pars2__.g:30:6: ( '-' )
			DebugEnterAlt(1);
			// pars2__.g:30:8: '-'
			{
			DebugLocation(30, 8);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__8", 5);
			LeaveRule("T__8", 5);
			LeaveRule_T__8();
		}
	}
	// $ANTLR end "T__8"

	partial void EnterRule_T__9();
	partial void LeaveRule_T__9();

	// $ANTLR start "T__9"
	[GrammarRule("T__9")]
	private void mT__9()
	{
		EnterRule_T__9();
		EnterRule("T__9", 6);
		TraceIn("T__9", 6);
		try
		{
			int _type = T__9;
			int _channel = DefaultTokenChannel;
			// pars2__.g:31:6: ( '.' )
			DebugEnterAlt(1);
			// pars2__.g:31:8: '.'
			{
			DebugLocation(31, 8);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__9", 6);
			LeaveRule("T__9", 6);
			LeaveRule_T__9();
		}
	}
	// $ANTLR end "T__9"

	partial void EnterRule_T__10();
	partial void LeaveRule_T__10();

	// $ANTLR start "T__10"
	[GrammarRule("T__10")]
	private void mT__10()
	{
		EnterRule_T__10();
		EnterRule("T__10", 7);
		TraceIn("T__10", 7);
		try
		{
			int _type = T__10;
			int _channel = DefaultTokenChannel;
			// pars2__.g:32:7: ( '/' )
			DebugEnterAlt(1);
			// pars2__.g:32:9: '/'
			{
			DebugLocation(32, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__10", 7);
			LeaveRule("T__10", 7);
			LeaveRule_T__10();
		}
	}
	// $ANTLR end "T__10"

	partial void EnterRule_T__11();
	partial void LeaveRule_T__11();

	// $ANTLR start "T__11"
	[GrammarRule("T__11")]
	private void mT__11()
	{
		EnterRule_T__11();
		EnterRule("T__11", 8);
		TraceIn("T__11", 8);
		try
		{
			int _type = T__11;
			int _channel = DefaultTokenChannel;
			// pars2__.g:33:7: ( '0' )
			DebugEnterAlt(1);
			// pars2__.g:33:9: '0'
			{
			DebugLocation(33, 9);
			Match('0'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__11", 8);
			LeaveRule("T__11", 8);
			LeaveRule_T__11();
		}
	}
	// $ANTLR end "T__11"

	partial void EnterRule_T__12();
	partial void LeaveRule_T__12();

	// $ANTLR start "T__12"
	[GrammarRule("T__12")]
	private void mT__12()
	{
		EnterRule_T__12();
		EnterRule("T__12", 9);
		TraceIn("T__12", 9);
		try
		{
			int _type = T__12;
			int _channel = DefaultTokenChannel;
			// pars2__.g:34:7: ( '1' )
			DebugEnterAlt(1);
			// pars2__.g:34:9: '1'
			{
			DebugLocation(34, 9);
			Match('1'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__12", 9);
			LeaveRule("T__12", 9);
			LeaveRule_T__12();
		}
	}
	// $ANTLR end "T__12"

	partial void EnterRule_T__13();
	partial void LeaveRule_T__13();

	// $ANTLR start "T__13"
	[GrammarRule("T__13")]
	private void mT__13()
	{
		EnterRule_T__13();
		EnterRule("T__13", 10);
		TraceIn("T__13", 10);
		try
		{
			int _type = T__13;
			int _channel = DefaultTokenChannel;
			// pars2__.g:35:7: ( '2' )
			DebugEnterAlt(1);
			// pars2__.g:35:9: '2'
			{
			DebugLocation(35, 9);
			Match('2'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__13", 10);
			LeaveRule("T__13", 10);
			LeaveRule_T__13();
		}
	}
	// $ANTLR end "T__13"

	partial void EnterRule_T__14();
	partial void LeaveRule_T__14();

	// $ANTLR start "T__14"
	[GrammarRule("T__14")]
	private void mT__14()
	{
		EnterRule_T__14();
		EnterRule("T__14", 11);
		TraceIn("T__14", 11);
		try
		{
			int _type = T__14;
			int _channel = DefaultTokenChannel;
			// pars2__.g:36:7: ( '3' )
			DebugEnterAlt(1);
			// pars2__.g:36:9: '3'
			{
			DebugLocation(36, 9);
			Match('3'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__14", 11);
			LeaveRule("T__14", 11);
			LeaveRule_T__14();
		}
	}
	// $ANTLR end "T__14"

	partial void EnterRule_T__15();
	partial void LeaveRule_T__15();

	// $ANTLR start "T__15"
	[GrammarRule("T__15")]
	private void mT__15()
	{
		EnterRule_T__15();
		EnterRule("T__15", 12);
		TraceIn("T__15", 12);
		try
		{
			int _type = T__15;
			int _channel = DefaultTokenChannel;
			// pars2__.g:37:7: ( '4' )
			DebugEnterAlt(1);
			// pars2__.g:37:9: '4'
			{
			DebugLocation(37, 9);
			Match('4'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__15", 12);
			LeaveRule("T__15", 12);
			LeaveRule_T__15();
		}
	}
	// $ANTLR end "T__15"

	partial void EnterRule_T__16();
	partial void LeaveRule_T__16();

	// $ANTLR start "T__16"
	[GrammarRule("T__16")]
	private void mT__16()
	{
		EnterRule_T__16();
		EnterRule("T__16", 13);
		TraceIn("T__16", 13);
		try
		{
			int _type = T__16;
			int _channel = DefaultTokenChannel;
			// pars2__.g:38:7: ( '5' )
			DebugEnterAlt(1);
			// pars2__.g:38:9: '5'
			{
			DebugLocation(38, 9);
			Match('5'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__16", 13);
			LeaveRule("T__16", 13);
			LeaveRule_T__16();
		}
	}
	// $ANTLR end "T__16"

	partial void EnterRule_T__17();
	partial void LeaveRule_T__17();

	// $ANTLR start "T__17"
	[GrammarRule("T__17")]
	private void mT__17()
	{
		EnterRule_T__17();
		EnterRule("T__17", 14);
		TraceIn("T__17", 14);
		try
		{
			int _type = T__17;
			int _channel = DefaultTokenChannel;
			// pars2__.g:39:7: ( '6' )
			DebugEnterAlt(1);
			// pars2__.g:39:9: '6'
			{
			DebugLocation(39, 9);
			Match('6'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__17", 14);
			LeaveRule("T__17", 14);
			LeaveRule_T__17();
		}
	}
	// $ANTLR end "T__17"

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 15);
		TraceIn("T__18", 15);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// pars2__.g:40:7: ( '7' )
			DebugEnterAlt(1);
			// pars2__.g:40:9: '7'
			{
			DebugLocation(40, 9);
			Match('7'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 15);
			LeaveRule("T__18", 15);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 16);
		TraceIn("T__19", 16);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// pars2__.g:41:7: ( '8' )
			DebugEnterAlt(1);
			// pars2__.g:41:9: '8'
			{
			DebugLocation(41, 9);
			Match('8'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 16);
			LeaveRule("T__19", 16);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 17);
		TraceIn("T__20", 17);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// pars2__.g:42:7: ( '9' )
			DebugEnterAlt(1);
			// pars2__.g:42:9: '9'
			{
			DebugLocation(42, 9);
			Match('9'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 17);
			LeaveRule("T__20", 17);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 18);
		TraceIn("T__21", 18);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// pars2__.g:43:7: ( ':' )
			DebugEnterAlt(1);
			// pars2__.g:43:9: ':'
			{
			DebugLocation(43, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 18);
			LeaveRule("T__21", 18);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 19);
		TraceIn("T__22", 19);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// pars2__.g:44:7: ( '=' )
			DebugEnterAlt(1);
			// pars2__.g:44:9: '='
			{
			DebugLocation(44, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 19);
			LeaveRule("T__22", 19);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 20);
		TraceIn("T__23", 20);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// pars2__.g:45:7: ( 'A' )
			DebugEnterAlt(1);
			// pars2__.g:45:9: 'A'
			{
			DebugLocation(45, 9);
			Match('A'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 20);
			LeaveRule("T__23", 20);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 21);
		TraceIn("T__24", 21);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// pars2__.g:46:7: ( 'S' )
			DebugEnterAlt(1);
			// pars2__.g:46:9: 'S'
			{
			DebugLocation(46, 9);
			Match('S'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 21);
			LeaveRule("T__24", 21);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 22);
		TraceIn("T__25", 22);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// pars2__.g:47:7: ( '[' )
			DebugEnterAlt(1);
			// pars2__.g:47:9: '['
			{
			DebugLocation(47, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 22);
			LeaveRule("T__25", 22);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 23);
		TraceIn("T__26", 23);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// pars2__.g:48:7: ( '\\'' )
			DebugEnterAlt(1);
			// pars2__.g:48:9: '\\''
			{
			DebugLocation(48, 9);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 23);
			LeaveRule("T__26", 23);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 24);
		TraceIn("T__27", 24);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// pars2__.g:49:7: ( '\\\\' )
			DebugEnterAlt(1);
			// pars2__.g:49:9: '\\\\'
			{
			DebugLocation(49, 9);
			Match('\\'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 24);
			LeaveRule("T__27", 24);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 25);
		TraceIn("T__28", 25);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// pars2__.g:50:7: ( ']' )
			DebugEnterAlt(1);
			// pars2__.g:50:9: ']'
			{
			DebugLocation(50, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 25);
			LeaveRule("T__28", 25);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 26);
		TraceIn("T__29", 26);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// pars2__.g:51:7: ( 'a' )
			DebugEnterAlt(1);
			// pars2__.g:51:9: 'a'
			{
			DebugLocation(51, 9);
			Match('a'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 26);
			LeaveRule("T__29", 26);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 27);
		TraceIn("T__30", 27);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// pars2__.g:52:7: ( 'c' )
			DebugEnterAlt(1);
			// pars2__.g:52:9: 'c'
			{
			DebugLocation(52, 9);
			Match('c'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 27);
			LeaveRule("T__30", 27);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 28);
		TraceIn("T__31", 28);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// pars2__.g:53:7: ( 'e' )
			DebugEnterAlt(1);
			// pars2__.g:53:9: 'e'
			{
			DebugLocation(53, 9);
			Match('e'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 28);
			LeaveRule("T__31", 28);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 29);
		TraceIn("T__32", 29);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// pars2__.g:54:7: ( 'i' )
			DebugEnterAlt(1);
			// pars2__.g:54:9: 'i'
			{
			DebugLocation(54, 9);
			Match('i'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 29);
			LeaveRule("T__32", 29);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 30);
		TraceIn("T__33", 30);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// pars2__.g:55:7: ( 'l' )
			DebugEnterAlt(1);
			// pars2__.g:55:9: 'l'
			{
			DebugLocation(55, 9);
			Match('l'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 30);
			LeaveRule("T__33", 30);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 31);
		TraceIn("T__34", 31);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// pars2__.g:56:7: ( 'p' )
			DebugEnterAlt(1);
			// pars2__.g:56:9: 'p'
			{
			DebugLocation(56, 9);
			Match('p'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 31);
			LeaveRule("T__34", 31);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 32);
		TraceIn("T__35", 32);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// pars2__.g:57:7: ( 'r' )
			DebugEnterAlt(1);
			// pars2__.g:57:9: 'r'
			{
			DebugLocation(57, 9);
			Match('r'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 32);
			LeaveRule("T__35", 32);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 33);
		TraceIn("T__36", 33);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// pars2__.g:58:7: ( 'u' )
			DebugEnterAlt(1);
			// pars2__.g:58:9: 'u'
			{
			DebugLocation(58, 9);
			Match('u'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 33);
			LeaveRule("T__36", 33);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 34);
		TraceIn("T__37", 34);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// pars2__.g:59:7: ( 'x' )
			DebugEnterAlt(1);
			// pars2__.g:59:9: 'x'
			{
			DebugLocation(59, 9);
			Match('x'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 34);
			LeaveRule("T__37", 34);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 35);
		TraceIn("T__38", 35);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// pars2__.g:60:7: ( 'y' )
			DebugEnterAlt(1);
			// pars2__.g:60:9: 'y'
			{
			DebugLocation(60, 9);
			Match('y'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 35);
			LeaveRule("T__38", 35);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	public override void mTokens()
	{
		// pars2__.g:1:8: ( T__4 | T__5 | T__6 | T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 )
		int alt1=35;
		try { DebugEnterDecision(1, false);
		switch (input.LA(1))
		{
		case '\"':
			{
			alt1 = 1;
			}
			break;
		case '(':
			{
			alt1 = 2;
			}
			break;
		case ')':
			{
			alt1 = 3;
			}
			break;
		case '+':
			{
			alt1 = 4;
			}
			break;
		case '-':
			{
			alt1 = 5;
			}
			break;
		case '.':
			{
			alt1 = 6;
			}
			break;
		case '/':
			{
			alt1 = 7;
			}
			break;
		case '0':
			{
			alt1 = 8;
			}
			break;
		case '1':
			{
			alt1 = 9;
			}
			break;
		case '2':
			{
			alt1 = 10;
			}
			break;
		case '3':
			{
			alt1 = 11;
			}
			break;
		case '4':
			{
			alt1 = 12;
			}
			break;
		case '5':
			{
			alt1 = 13;
			}
			break;
		case '6':
			{
			alt1 = 14;
			}
			break;
		case '7':
			{
			alt1 = 15;
			}
			break;
		case '8':
			{
			alt1 = 16;
			}
			break;
		case '9':
			{
			alt1 = 17;
			}
			break;
		case ':':
			{
			alt1 = 18;
			}
			break;
		case '=':
			{
			alt1 = 19;
			}
			break;
		case 'A':
			{
			alt1 = 20;
			}
			break;
		case 'S':
			{
			alt1 = 21;
			}
			break;
		case '[':
			{
			alt1 = 22;
			}
			break;
		case '\'':
			{
			alt1 = 23;
			}
			break;
		case '\\':
			{
			alt1 = 24;
			}
			break;
		case ']':
			{
			alt1 = 25;
			}
			break;
		case 'a':
			{
			alt1 = 26;
			}
			break;
		case 'c':
			{
			alt1 = 27;
			}
			break;
		case 'e':
			{
			alt1 = 28;
			}
			break;
		case 'i':
			{
			alt1 = 29;
			}
			break;
		case 'l':
			{
			alt1 = 30;
			}
			break;
		case 'p':
			{
			alt1 = 31;
			}
			break;
		case 'r':
			{
			alt1 = 32;
			}
			break;
		case 'u':
			{
			alt1 = 33;
			}
			break;
		case 'x':
			{
			alt1 = 34;
			}
			break;
		case 'y':
			{
			alt1 = 35;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(1); }
		switch (alt1)
		{
		case 1:
			DebugEnterAlt(1);
			// pars2__.g:1:10: T__4
			{
			DebugLocation(1, 10);
			mT__4(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// pars2__.g:1:15: T__5
			{
			DebugLocation(1, 15);
			mT__5(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// pars2__.g:1:20: T__6
			{
			DebugLocation(1, 20);
			mT__6(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// pars2__.g:1:25: T__7
			{
			DebugLocation(1, 25);
			mT__7(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// pars2__.g:1:30: T__8
			{
			DebugLocation(1, 30);
			mT__8(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// pars2__.g:1:35: T__9
			{
			DebugLocation(1, 35);
			mT__9(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// pars2__.g:1:40: T__10
			{
			DebugLocation(1, 40);
			mT__10(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// pars2__.g:1:46: T__11
			{
			DebugLocation(1, 46);
			mT__11(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// pars2__.g:1:52: T__12
			{
			DebugLocation(1, 52);
			mT__12(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// pars2__.g:1:58: T__13
			{
			DebugLocation(1, 58);
			mT__13(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// pars2__.g:1:64: T__14
			{
			DebugLocation(1, 64);
			mT__14(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// pars2__.g:1:70: T__15
			{
			DebugLocation(1, 70);
			mT__15(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// pars2__.g:1:76: T__16
			{
			DebugLocation(1, 76);
			mT__16(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// pars2__.g:1:82: T__17
			{
			DebugLocation(1, 82);
			mT__17(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// pars2__.g:1:88: T__18
			{
			DebugLocation(1, 88);
			mT__18(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// pars2__.g:1:94: T__19
			{
			DebugLocation(1, 94);
			mT__19(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// pars2__.g:1:100: T__20
			{
			DebugLocation(1, 100);
			mT__20(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// pars2__.g:1:106: T__21
			{
			DebugLocation(1, 106);
			mT__21(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// pars2__.g:1:112: T__22
			{
			DebugLocation(1, 112);
			mT__22(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// pars2__.g:1:118: T__23
			{
			DebugLocation(1, 118);
			mT__23(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// pars2__.g:1:124: T__24
			{
			DebugLocation(1, 124);
			mT__24(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// pars2__.g:1:130: T__25
			{
			DebugLocation(1, 130);
			mT__25(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// pars2__.g:1:136: T__26
			{
			DebugLocation(1, 136);
			mT__26(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// pars2__.g:1:142: T__27
			{
			DebugLocation(1, 142);
			mT__27(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// pars2__.g:1:148: T__28
			{
			DebugLocation(1, 148);
			mT__28(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// pars2__.g:1:154: T__29
			{
			DebugLocation(1, 154);
			mT__29(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// pars2__.g:1:160: T__30
			{
			DebugLocation(1, 160);
			mT__30(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// pars2__.g:1:166: T__31
			{
			DebugLocation(1, 166);
			mT__31(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// pars2__.g:1:172: T__32
			{
			DebugLocation(1, 172);
			mT__32(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// pars2__.g:1:178: T__33
			{
			DebugLocation(1, 178);
			mT__33(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// pars2__.g:1:184: T__34
			{
			DebugLocation(1, 184);
			mT__34(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// pars2__.g:1:190: T__35
			{
			DebugLocation(1, 190);
			mT__35(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// pars2__.g:1:196: T__36
			{
			DebugLocation(1, 196);
			mT__36(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// pars2__.g:1:202: T__37
			{
			DebugLocation(1, 202);
			mT__37(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// pars2__.g:1:208: T__38
			{
			DebugLocation(1, 208);
			mT__38(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

	#endregion

}

} // namespace  Generated 

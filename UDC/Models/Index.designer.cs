#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.19448
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UDC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DBLibUDC_21_01")]
	public partial class IndexDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertIndex(Index instance);
    partial void UpdateIndex(Index instance);
    partial void DeleteIndex(Index instance);
    #endregion
		
		public IndexDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DBLibUDC_21_01ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IndexDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IndexDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IndexDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IndexDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Index> Index
		{
			get
			{
				return this.GetTable<Index>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Index]")]
	public partial class Index : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _ParentId;
		
		private string _Name;
		
		private string _Comment;
		
		private string _SubdivideWith;
		
		private string _SubdivideAs;
		
		private string _IndexType;
		
		private string _TableType;
		
		private bool _Removed;
		
		private bool _isGroupIndex;
		
		private bool _isDontKnowExact;
		
		private EntitySet<Index> _Index2;
		
		private EntityRef<Index> _Index1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnSubdivideWithChanging(string value);
    partial void OnSubdivideWithChanged();
    partial void OnSubdivideAsChanging(string value);
    partial void OnSubdivideAsChanged();
    partial void OnIndexTypeChanging(string value);
    partial void OnIndexTypeChanged();
    partial void OnTableTypeChanging(string value);
    partial void OnTableTypeChanged();
    partial void OnRemovedChanging(bool value);
    partial void OnRemovedChanged();
    partial void OnisGroupIndexChanging(bool value);
    partial void OnisGroupIndexChanged();
    partial void OnisDontKnowExactChanging(bool value);
    partial void OnisDontKnowExactChanged();
    #endregion
		
		public Index()
		{
			this._Index2 = new EntitySet<Index>(new Action<Index>(this.attach_Index2), new Action<Index>(this.detach_Index2));
			this._Index1 = default(EntityRef<Index>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Index1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubdivideWith", DbType="NVarChar(MAX)")]
		public string SubdivideWith
		{
			get
			{
				return this._SubdivideWith;
			}
			set
			{
				if ((this._SubdivideWith != value))
				{
					this.OnSubdivideWithChanging(value);
					this.SendPropertyChanging();
					this._SubdivideWith = value;
					this.SendPropertyChanged("SubdivideWith");
					this.OnSubdivideWithChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubdivideAs", DbType="NVarChar(255)")]
		public string SubdivideAs
		{
			get
			{
				return this._SubdivideAs;
			}
			set
			{
				if ((this._SubdivideAs != value))
				{
					this.OnSubdivideAsChanging(value);
					this.SendPropertyChanging();
					this._SubdivideAs = value;
					this.SendPropertyChanged("SubdivideAs");
					this.OnSubdivideAsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string IndexType
		{
			get
			{
				return this._IndexType;
			}
			set
			{
				if ((this._IndexType != value))
				{
					this.OnIndexTypeChanging(value);
					this.SendPropertyChanging();
					this._IndexType = value;
					this.SendPropertyChanged("IndexType");
					this.OnIndexTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableType", DbType="NVarChar(50)")]
		public string TableType
		{
			get
			{
				return this._TableType;
			}
			set
			{
				if ((this._TableType != value))
				{
					this.OnTableTypeChanging(value);
					this.SendPropertyChanging();
					this._TableType = value;
					this.SendPropertyChanged("TableType");
					this.OnTableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Removed", DbType="Bit NOT NULL")]
		public bool Removed
		{
			get
			{
				return this._Removed;
			}
			set
			{
				if ((this._Removed != value))
				{
					this.OnRemovedChanging(value);
					this.SendPropertyChanging();
					this._Removed = value;
					this.SendPropertyChanged("Removed");
					this.OnRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isGroupIndex", DbType="Bit NOT NULL")]
		public bool isGroupIndex
		{
			get
			{
				return this._isGroupIndex;
			}
			set
			{
				if ((this._isGroupIndex != value))
				{
					this.OnisGroupIndexChanging(value);
					this.SendPropertyChanging();
					this._isGroupIndex = value;
					this.SendPropertyChanged("isGroupIndex");
					this.OnisGroupIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDontKnowExact", DbType="Bit NOT NULL")]
		public bool isDontKnowExact
		{
			get
			{
				return this._isDontKnowExact;
			}
			set
			{
				if ((this._isDontKnowExact != value))
				{
					this.OnisDontKnowExactChanging(value);
					this.SendPropertyChanging();
					this._isDontKnowExact = value;
					this.SendPropertyChanged("isDontKnowExact");
					this.OnisDontKnowExactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Index_Index", Storage="_Index2", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Index> Index2
		{
			get
			{
				return this._Index2;
			}
			set
			{
				this._Index2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Index_Index", Storage="_Index1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Index Index1
		{
			get
			{
				return this._Index1.Entity;
			}
			set
			{
				Index previousValue = this._Index1.Entity;
				if (((previousValue != value) 
							|| (this._Index1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Index1.Entity = null;
						previousValue.Index2.Remove(this);
					}
					this._Index1.Entity = value;
					if ((value != null))
					{
						value.Index2.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Index1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Index2(Index entity)
		{
			this.SendPropertyChanging();
			entity.Index1 = this;
		}
		
		private void detach_Index2(Index entity)
		{
			this.SendPropertyChanging();
			entity.Index1 = null;
		}
	}
}
#pragma warning restore 1591
